AWSTemplateFormatVersion: 2010-09-09
Description: Part 2 - Add a database with CloudFormation

Parameters:
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: 'us-east-1a'
  EnvironmentType:
    Description: 'Specify the Environment type of the stack.'
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
  AmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: 'The ID of the AMI.'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  DBInstanceIdentifier:
    Type: String
    Default: 'webapp-db'
  DBUsername:
    NoEcho: 'true'
    Description: Username for Postgresql database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
    Default: 'postgres'

  DBPassword:
    NoEcho: 'true'
    Description: Password for Postgresql database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters.
    Default: 'dev123456'

  TagKey:
    Description: The EC2 tag key that identifies this as a target for deployments.
    Type: String
    Default: CodeDeployTag
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.

  TagValue:
    Description: The EC2 tag value that identifies this as a target for deployments.
    Type: String
    Default: CodeDeployDemo
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.

  ThumbprintList:
    Type: String
    Default: 6938fd4d98bab03faadb97b34396831e3780aea1
    Description: A thumbprint of an Open ID Connector is a SHA1 hash of the public certificate of the host

  GithubRepoName:
    Type: String
    Description: GitHub repository name Ex-TestUser/TestCodeDeploy
    Default: 'joaoribs-developer/e-commerce'

Mappings:
  EnvironmentToInstanceType:
    dev:
      InstanceType: t2.micro
    test:
      InstanceType: t2.micro
    prod:
      InstanceType: t2.micro

Resources:
  ImportedKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: my-ssh-key
      PublicKeyMaterial: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCxsEtnRDzmUGara3Hx6dtywu3n6A3ZtnFC+H2M0W0mpq6NC7p8hxyOw5gmzljEIxsI2YzjsE2HoCADtLBUqgJ4GOz4Za+ujoIy8lYhnLPNxlUQGNQKAOCiRe33HOF9TYQ9G7tILJlZZA/HuuLdA3yGhFbvWCAejTmFYYqXqpY/vObhcve9Z5cpoaDTnZnaUCC2lO9RnElWpF4vpb6EXNEp6M0XCIsAi9dY7hE3LXefMrP91GPHSgfVwYQE8gpxqChds8AyP3/K3KswR/jzAuIeJ46HDfXpXAub7ot494mQUq/T/kHjRrkexBIaGYtn2XxKP8VSGUoUGB6w5NhUJd61C5lzu63vFIghosEWRmVk4o07O+8oBfdWQc1OluSunnm+gJM5xbDS6vpHji/fARbn2MX3ni7OEqDURtERoE5WSKCbbdt291O9rNs8KOuXDt9tcjkewSNSTTsee66XtROmdZbGXZUFGivDPrQbZwxCnyeGvBef0+SlF/XviCDJ3tcbKtdW1khb34xr4wJpbO8z/FSQKvMsxP7Odz9V4nXBIcOpxPH86EzwNCnETBWO8XoH0B442Zxn+UuEcG+XxNbv5C6IVtIuQXcu1Jev4sFVtnRCPPybf85Rdkc1sPXuwmI+YahJ5TG65nMqFZeZNIqsOdriJnbEeSgjPXuoALnQhQ==

  WebAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      ImageId: !Ref AmiID
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref EnvironmentType, InstanceType]
      KeyName: !Ref ImportedKeyPair
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        yum  install -y java-1.8.0-openjdk-devel wget
        java -version
        cd /usr/local
        wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.43/bin/apache-tomcat-9.0.43.zip
        wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.43/bin/apache-tomcat-9.0.43.zip.asc
        wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.43/bin/apache-tomcat-9.0.43.zip.sha512

        # verify hash / are these two outputs the same
        cat apache-tomcat-9.0.43.zip.sha512
        sha512sum apache-tomcat-9.0.43.zip

        gpg --keyserver pgpkeys.mit.edu --recv-key A9C5DF4D22E99998D9875A5110C01C5A2F6059E7
        gpg --verify apache-tomcat-9.0.43.zip.asc apache-tomcat-9.0.43.zip

        # if hash and signature are ok:
        unzip apache-tomcat-9.0.43.zip
        mv apache-tomcat-9.0.43 tomcat9
        echo 'JAVA_OPTS="$JAVA_OPTS -Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses=true "' > /usr/local/tomcat9/bin/setenv.sh
        ls -la tomcat9/
        useradd -r tomcat
        chown -R tomcat:tomcat /usr/local/tomcat9
        ls -l /usr/local/tomcat9

        echo "[Unit]
        Description=Apache Tomcat Server
        After=syslog.target network.target

        [Service]
        Type=forking
        User=tomcat
        Group=tomcat

        Environment=CATALINA_PID=/usr/local/tomcat9/temp/tomcat.pid
        Environment=CATALINA_HOME=/usr/local/tomcat9
        Environment=CATALINA_BASE=/usr/local/tomcat9

        ExecStart=/usr/local/tomcat9/bin/catalina.sh start
        ExecStop=/usr/local/tomcat9/bin/catalina.sh stop

        RestartSec=10
        Restart=always
        [Install]
        WantedBy=multi-user.target" > /etc/systemd/system/tomcat.service

        # firewall-cmd --zone=public --permanent --add-port=8080/tcp
        # firewall-cmd --zone=public --permanent --add-port=8443/tcp
        # firewall-cmd --reload
        cd /usr/local/tomcat9/bin && chmod +x catalina.sh
        systemctl daemon-reload
        systemctl start tomcat.service
        systemctl enable tomcat.service
        systemctl status tomcat.service
        sudo yum install ruby -y
        sudo wget https://aws-codedeploy-us-east-2.s3.us-east-2.amazonaws.com/latest/install
        sudo chmod +x ./install
        sudo yum install -y https://aws-codedeploy-us-east-2.s3.us-east-2.amazonaws.com/latest/codedeploy-agent.noarch.rpm
        cd /tmp
        sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        sudo systemctl enable amazon-ssm-agent
        sudo systemctl start amazon-ssm-agent
      Tags:
        - Key: !Ref 'TagKey'
          Value: !Ref 'TagValue'
      IamInstanceProfile: !Ref WebappInstanceProfile

  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ '-', [ webapp-security-group, !Ref EnvironmentType ] ]
      GroupDescription: 'Allow HTTP/HTTPS and SSH inbound and outbound traffic'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  WebAppEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref WebAppInstance
      Tags:
        - Key: Name
          Value: !Join [ '-', [ webapp-eip, !Ref EnvironmentType ] ]

  WebAppDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Join [ '', [ 'ecommerce', !Ref EnvironmentType ] ]
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      VPCSecurityGroups:
        - !GetAtt DBEC2SecurityGroup.GroupId
      AllocatedStorage: '5'
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      Tags:
        - Key: Name
          Value: !Join [ '-', [ webapp-rds, !Ref EnvironmentType ] ]
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ '-', [ webapp-db-security-group, !Ref EnvironmentType ] ]
      GroupDescription: Allow postgres inbound traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join [ '-', [ webapp-db-security-group, !Ref EnvironmentType ] ]

  WebappRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: WebappRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
      Policies:
        - PolicyName: "allow-webapp-deployment-bucket-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:getObject"
                Resource: !Sub arn:${AWS::Partition}:s3:::${WebappDeploymentBucket}/*

  IDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: "https://token.actions.githubusercontent.com"
      ClientIdList:
        - "sts.amazonaws.com"
      ThumbprintList:
        - !Ref ThumbprintList

  GitHubIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: CodeDeployRoleforGitHub
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: !Ref IDCProvider
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GithubRepoName}:*
      MaxSessionDuration: 3600
      Description: "Github Actions role"
      Policies:

        - PolicyName: 'CodeDeployRoleforGitHub-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codedeploy:Get*'
                  - 'codedeploy:Batch*'
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:RegisterApplicationRevision'
                  - 'codedeploy:List*'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:codedeploy:*:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - 's3:putObject'
                Resource: !Sub arn:${AWS::Partition}:s3:::${WebappDeploymentBucket}/*

  WebappApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: CodeDeployAppNameWithASG

  WebappDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref WebappApplication
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      DeploymentGroupName: CodeDeployGroupName
      DeploymentStyle:
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_REQUEST
      Ec2TagFilters:
        - Key: !Ref 'TagKey'
          Value: !Ref 'TagValue'
          Type: KEY_AND_VALUE

  WebappDeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
      Policies:
        - PolicyName: allow-ec2
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:RunInstances
                  - ec2:CreateTags
                  - iam:PassRole
                Resource:
                  - !Sub 'arn:${AWS::Partition}:codedeploy:*:${AWS::AccountId}:*'

  WebappInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WebappRole

Outputs:
  WebsiteURL:
    Value: !Sub http://${WebAppEIP}
    Description: WebApp URL

  WebServerPublicDNS:
    Description: 'Public DNS of EC2 instance'
    Value: !GetAtt WebAppInstance.PublicDnsName

  WebAppDatabaseEndpoint:
    Description: 'Connection endpoint for the database'
    Value: !GetAtt WebAppDatabase.Endpoint.Address

  WebappUrl:
    Description: Webapp URL
    Value:
      Fn::Join:
        - ''
        - - http://
          - !GetAtt WebAppInstance.PublicDnsName
          - ':8080/SpringBootHelloWorldExampleApplication'

  GithubIAMRoleArn:
    Description: IAM role for GitHub
    Value: !GetAtt GitHubIAMRole.Arn